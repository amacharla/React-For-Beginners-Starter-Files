import React from 'react';
import { formatPrice } from '../helpers';
import CSSTransitionGroup from 'react-addons-css-transition-group';

class Order extends React.Component {

  constructor () {
    super();
    this.renderOrder = this.renderOrder.bind(this);
  }

  /**
   * Render function that renders list items fishname and price
   * @param  {string} key [unique identifier for listitem `fist-timestamp`]
   * @return {html element <li>} [lbs FishName $FishPrice]
   */
  renderOrder(key) {
    const fish = this.props.fishes[key];
    const count = this.props.order[key];
    const removeButton =
    <button onClick={() => this.props.removeOrder(key)}>&times;</button>

    if(!fish || fish.status === 'unavailable') {
      return (
        <li key={key}>
          Sorry, {fish ? fish.name : 'fish'} is no longer available! {removeButton}
      </li>
      )
    }
    // ELSE Print price

    /*
      Need to put the `count` in a span because React will duplicate it pause
      (2 span elemements will exist thus `key` attribute is required)
      for 250s during which count-leave and
      count-active will be generated by CSSTransitionGroup
      which you manipulate in the _animations.styl file
     */
    return(
      <li key={key}>
        <span>
          <CSSTransitionGroup component='span' className='count'
            transitionName='count' transitionEnterTimeout={250} transitionLeaveTimeout={250}>
            <span key={count}>{count}</span>
          </CSSTransitionGroup>
          lbs {fish.name} {removeButton}
        </span>
        <span className="price">{formatPrice(count * fish.price)}</span>
      </li>
    )
  }

  render() {
    const { fishes, order} = this.props;
    const orderIds = Object.keys(order);

    const total = orderIds.reduce((prevTotal, key) => { // wtf is reduce doing!?
      const fish = fishes[key];
      const count = order[key];
      const isAvailable = fish && fish.status === 'available';

      if(isAvailable) { return prevTotal + (count * fish.price || 0) }
    }, 0);

    /* CSSTransitionGroup will give temp className when new ul is added or removeOrder
       thus allowing it to be animated via _animations.styl with those class names
       use `component=ul` so it will be rendered as an unordered list
    */

   return (
     <div className="order-wrap">
       <h2>Your Order</h2>
       <CSSTransitionGroup className='order' component='ul'
         transitionName='order' transitionEnterTimeout={500} transitionLeaveTimeout={500}>
         {orderIds.map(this.renderOrder)}
         <li className="total">
          <strong>Total:</strong>
          {formatPrice(total)}
         </li>
       </CSSTransitionGroup>
     </div>
    )
  }
}

export default Order;
